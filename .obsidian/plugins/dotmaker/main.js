/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => MyPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var { exec } = require("child_process");
var nodeData = {};
var edgeData = {};
var graphDot = {};
var bcNodeList = app.plugins.plugins.breadcrumbs.mainG.toJSON().nodes;
var bcEdgeList = app.plugins.plugins.breadcrumbs.mainG.toJSON().edges;
function debug() {
  console.log("nodeData", nodeData);
  console.log("edgeData", edgeData);
  console.log("graphDot", graphDot);
  console.log("process.cwd()", process.cwd());
}
var workingDirectory = app.vault.adapter.getBasePath() + "\\" + app.vault.configDir + "\\plugins\\dotmaker\\graphs\\";
console.log("Starting directory: " + process.cwd());
try {
  process.chdir(workingDirectory);
  console.log("New directory: " + process.cwd());
} catch (err) {
  console.log("chdir: " + err);
}
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.clear();
      const nodeTypeListDeclaration = {
        masterGraph: {
          style: 'shape=plaintext style="filled, rounded" fontname="SVN-Avo" margin=0.2 fillcolor="#c6cac3"',
          graphHeader: `
overlap=false
style=rounded
// ranksep="0.4";
label="C\xF4ng vi\u1EC7c PMN";
//sep=10
fontsize = 30
labelloc="t";
fontname="Lato";`
        },
        "C\xF4ng vi\u1EC7c th\xE0nh ph\u1EA7n": {
          method: "End of edge type",
          style: "shape=polygon"
        },
        next: {
          method: "End of edge type",
          style: "shape=polygon",
          cluster: true,
          subgraphSetting: ""
        }
      };
      const edgeTypeListDeclaration = {
        masterGraph: {
          style: "penwidth=1"
        },
        "C\xF4ng vi\u1EC7c th\xE0nh ph\u1EA7n": {
          style: "penwidth=1 style=solid"
        },
        next: {
          style: "penwidth=1 style=dashed"
        }
      };
      const nodeTypeList = Object.keys(nodeTypeListDeclaration);
      const edgeTypeList = Object.keys(edgeTypeListDeclaration);
      var IsBreadcrumbsrunning = new Promise((resolve, reject) => {
        if (bcEdgeList.length !== 0) {
          resolve("Breadcrumbs is running properly");
        } else {
          reject("Breadcrumbs has problem");
        }
      });
      IsBreadcrumbsrunning.then((message) => console.log(message)).catch((message) => console.log(message));
      function makeLabel(name) {
        return name.replace(/(?![^\n]{1,32}$)([^\n]{1,32})\s/g, "$1\\n").replace(/[❝❞]/g, '\\"');
      }
      function IndividualNodeType(nodetype, i2) {
        this.settings = nodeTypeListDeclaration[nodetype];
        this.settings.order = i2;
        this.nodes = [];
        this.neighborNode = {
          sourceOf: [],
          targetOf: []
        };
      }
      function IndividualNode(name, nodetype) {
        this.name = name;
        this.label = makeLabel(this.name);
        this.index = this.name.split(" ")[0];
        this.path = this.name + ".md";
        this.folder = this.path.split("/").slice(0, -1).join("/");
        this.tag = "none";
        this.frontmatter = "none";
        this.inMetadata = false;
        this.endOfEdgeType = nodetype;
        this.neighbor = {
          sourceOf: bcEdgeList.filter((edge) => edge.source == this.name).map((edge) => edge.target),
          targetOf: bcEdgeList.filter((edge) => edge.target == this.name).map((edge) => edge.source)
        };
        this.existsInMetadata = function() {
          if (Object.keys(app.metadataCache.fileCache).includes(this.path)) {
            this.inMetadata = true;
            var nodeMetadata = app.metadataCache.getCache(this.path);
            if (nodeMetadata.frontmatter !== void 0) {
              this.frontmatter = nodeMetadata.frontmatter;
            }
            if (nodeMetadata.tags !== void 0) {
              this.tag = nodeMetadata.tags;
            }
          }
        };
      }
      function createNodeTmp(item, nodetype, nodeTypeTmp) {
        const nodeTmp = new IndividualNode(item.target, nodetype);
        nodeTmp.existsInMetadata();
        nodeTypeTmp.nodes.push(nodeTmp);
      }
      let i = 0;
      nodeTypeList.forEach((nodetype) => {
        const method = nodeTypeListDeclaration[nodetype].method;
        const nodeTypeTmp = new IndividualNodeType(nodetype, i);
        bcEdgeList.forEach((item) => {
          if (method == "End of edge type") {
            if (item.attributes.field == nodetype) {
              createNodeTmp(item, nodetype, nodeTypeTmp);
            }
          }
          if (method == "Index") {
            var branchIndex = nodetype.split("_")[nodetype.split("_").length - 1];
            var itemIndex = item.target.split(" ")[0];
            var itemBranchIndex = itemIndex.split("-")[0].split(".")[0];
            if (itemBranchIndex == branchIndex || itemBranchIndex + "+" == branchIndex) {
              createNodeTmp(item, nodetype, nodeTypeTmp);
            }
          }
        });
        nodeData[nodetype] = nodeTypeTmp;
        i++;
      });
      nodeTypeList.forEach((nodetype) => {
        var tmpTarget = [];
        var tmpSource = [];
        nodeData[nodetype].nodes.forEach((node) => {
          tmpTarget = tmpTarget.concat(node.neighbor.targetOf);
          tmpSource = tmpSource.concat(node.neighbor.sourceOf);
        });
        nodeData[nodetype].neighborNode.targetOf = [...new Set(tmpTarget)];
        nodeData[nodetype].neighborNode.sourceOf = [...new Set(tmpSource)];
      });
      function IndividualEdgeType() {
        this.settings = "";
        this.edges = [];
      }
      function IndividualEdge(start, dir, end, id) {
        this.start = start;
        this.end = end;
        this.id = id;
      }
      const edgeTypeNoDeclare = new IndividualEdgeType();
      edgeTypeNoDeclare.type = "This link field in Breadcrumbs plugin isn't declared in Hierarchical Graph plugin";
      let j = 0;
      edgeTypeList.forEach((edgetype) => {
        const edgeTypeTmp = new IndividualEdgeType();
        edgeTypeTmp.settings = edgeTypeListDeclaration[edgetype];
        edgeTypeTmp.settings.order = j;
        bcEdgeList.forEach((edge) => {
          var bcEdgeField = edge.attributes.field;
          const edgeTmp = new IndividualEdge();
          edgeTmp.start = edge.source;
          edgeTmp.end = edge.target;
          edgeTmp.id = edge.key;
          if (bcEdgeField == edgetype) {
            edgeTypeTmp.edges.push(edgeTmp);
          } else if (!edgeTypeList.includes(bcEdgeField)) {
            edgeTypeNoDeclare.edges.push(edgeTmp);
          }
        });
        edgeData[edgetype] = edgeTypeTmp;
        j++;
      });
      edgeData["No Declared"] = edgeTypeNoDeclare;
      function addNodesForEachGraph(graph, nodetype, node) {
        const neighborNode = nodeData[graph].neighborNode;
        if (graph == "masterGraph") {
          graphDot.masterGraph.nodeSection += `"${node.name}" [ label = "${node.label}" ] 
`;
        }
        if (graph !== "masterGraph" && nodetype == graph) {
          graphDot[graph].nodeSection += `"${node.name}" [ label = "${node.label}" ] 
`;
        }
        if (graph !== "masterGraph" && nodetype !== graph && (neighborNode.sourceOf.includes(node.name) || neighborNode.targetOf.includes(node.name))) {
          graphDot[graph].nodeSection += `"${node.name}" [ label = "${node.label}" ] 
`;
        }
      }
      function addPairingEdgesForEachGraph(graph, edgetype, edge, k2, style) {
        if (graph == "masterGraph") {
          graphDot.masterGraph.edgeSection += `
subgraph cluster_${edgetype}_${k2}{
rank=same
edge [ ${style} ]
"${edge.start}" -> "${edge.end}"
}`;
        }
        if (graph != "masterGraph" && edgetype == graph) {
          graphDot[graph].edgeSection += `
		subgraph cluster_${edgetype}_${k2}{
			rank=same
			edge [ ${style} ]
			"${edge.start}" -> "${edge.end}"
}`;
        }
        k2++;
      }
      function addNonPairingEdgesForEachGraph(graph, edgetype, edge) {
        if (graph == "masterGraph") {
          graphDot.masterGraph.edgeSection += `"${edge.start}" -> "${edge.end}"
`;
        }
        function checkNodeRelationToCurrentGraph(edgetype2, edge2, graph2) {
          var a = nodeData[graph2].nodes.filter((node) => node.name == edge2.start || node.name == edge2.end);
          if (a.length != 0) {
            return true;
          }
        }
        if (graph !== "masterGraph" && checkNodeRelationToCurrentGraph(edgetype, edge, graph)) {
          graphDot[graph].edgeSection += `"${edge.start}" -> "${edge.end}"
`;
        }
      }
      for (const graph in nodeTypeListDeclaration) {
        graphDot[graph] = {
          nodeSection: "",
          edgeSection: "",
          final: ""
        };
        graphDot[graph].nodeSection = `//NODES
//====================

`;
        nodeTypeList.forEach((nodetype) => {
          const style = nodeData[nodetype].settings.style;
          const cluster = nodeData[nodetype].settings.cluster;
          const subgraphSetting = nodeData[nodetype].settings.subgraphSetting;
          graphDot[graph].nodeSection += `
node [ ${nodeData.masterGraph.settings.style} ] //Reset style

`;
          graphDot[graph].nodeSection += `//All ${nodetype} nodes
`;
          if (cluster == true) {
            graphDot[graph].nodeSection += `subgraph cluster_${nodetype}{
${subgraphSetting}
`;
          }
          if (style !== void 0) {
            graphDot[graph].nodeSection += `
node [ ${style} ]
`;
          }
          nodeData[nodetype].nodes.forEach((node) => addNodesForEachGraph(graph, nodetype, node));
          if (cluster == true) {
            graphDot[graph].nodeSection += `}
`;
          }
        });
        graphDot[graph].edgeSection = `

//EDGES
//====================
`;
        var k = 0;
        edgeTypeList.forEach((edgetype) => {
          const sameRank = edgeData[edgetype].settings.sameRank;
          const cluster = edgeData[edgetype].settings.cluster;
          const style = edgeData[edgetype].settings.style;
          const pairing = edgeData[edgetype].settings.pairing;
          if (edgeData.masterGraph.settings.style !== void 0) {
            graphDot[graph].edgeSection += `
edge [ ${edgeData.masterGraph.settings.style} ] //Reset style
`;
          }
          graphDot[graph].edgeSection += `
//All ${edgetype} edges
`;
          if (pairing == true) {
            edgeData[edgetype].edges.forEach((edge) => {
              addPairingEdgesForEachGraph(graph, edgetype, edge, k, style);
              k++;
            });
          } else {
            if (cluster == true && sameRank == true) {
              graphDot[graph].edgeSection += `subgraph cluster_${edgetype}{
rank=same
`;
            }
            if (cluster == true && sameRank !== true) {
              graphDot[graph].edgeSection += `subgraph cluster_${edgetype}{
`;
            }
            if (cluster !== true && sameRank == true) {
              graphDot[graph].edgeSection += `subgraph {
rank=same
`;
            }
            if (style !== void 0) {
              graphDot[graph].edgeSection += `
edge [ ${style} ]
`;
            }
            edgeData[edgetype].edges.forEach((edge) => {
              addNonPairingEdgesForEachGraph(graph, edgetype, edge);
            });
            if (cluster == true || sameRank == true) {
              graphDot[graph].edgeSection += `}
`;
            }
          }
        });
        graphDot[graph].edgeSection += `
}`;
        graphDot[graph].final = `digraph "${graph}"{
${nodeData.masterGraph.settings.graphHeader}
`;
        graphDot[graph].final += graphDot[graph].nodeSection + graphDot[graph].edgeSection;
        const commandList = [
          `unflatten -l 3 "${graph}.dot" -o unflatten_"${graph}.dot"`,
          `dot -Tpng unflatten_"${graph}.dot" -o dot_""${graph}.png""`,
          `neato -Tpng "${graph}.dot" -o neato_"${graph}.png"`,
          `sfdp -Tpng "${graph}.dot" -o sfdp_"${graph}.png"`
        ];
        var filePath = app.vault.configDir + "\\plugins\\dotmaker\\graphs\\" + graph + ".dot";
        app.vault.adapter.write(filePath, graphDot[graph].final);
        commandList.forEach((command) => exec(command, (error, stdout, stderr) => {
          console.log("filePath:", filePath);
          console.log("graph:", graph, "command:", command);
          console.log("stdout:", stdout);
          console.log("stderr:", stderr);
          if (error !== null) {
            console.log(`exec error: ${error}`);
          }
        }));
      }
      debug();
      console.log(graphDot.branch_0);
      console.log("done");
    });
  }
  onunload() {
    console.log("unloading plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,
